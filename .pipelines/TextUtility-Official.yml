trigger:
- main

schedules:
- cron: '0 3 * * 1'
  displayName: Weekly CodeQL
  branches:
    include:
    - main
  always: true

parameters:
- name: debug
  displayName: Enable debug output
  type: boolean
  default: false

variables:
  system.debug: ${{ parameters.debug }}
  BuildConfiguration: Release
  WindowsContainerImage: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false

resources:
  repositories:
  - repository: templates
    type: git
    name: OneBranch.Pipelines/GovernedTemplates
    ref: refs/heads/main

extends:
  # https://aka.ms/obpipelines/templates
  template: v2/OneBranch.Official.CrossPlat.yml@templates
  parameters:
    globalSdl: # https://aka.ms/obpipelines/sdl
      asyncSdl:
        enabled: true
        forStages: [build]
    featureFlags:
      EnableCDPxPAT: false
      WindowsHostVersion:
        Version: 2022
        Network: KS3
    release:
      category: NonAzure
    stages:
    - stage: build
      jobs:
      - job: main
        displayName: Build package
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
          - pwsh: |
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
              $manifestData = Import-PowerShellDataFile -Path src/Microsoft.PowerShell.TextUtility.psd1
              $moduleVersion = $manifestData.ModuleVersion
              Write-Output "##vso[task.setvariable variable=version;isOutput=true]$moduleVersion"
              if ($manifestData.PrivateData.PsData.Prerelease) {
                $prerel = $manifestData.PrivateData.PSData.Prerelease
                $nupkgVersion = "${moduleVersion}-${prerel}"
              } else {
                $nupkgVersion = $moduleVersion
              }
              Write-Output "##vso[task.setvariable variable=nupkgversion;isOutput=true]$nupkgVersion"
            name: package
            displayName: Get version from project properties
          - task: onebranch.pipeline.version@1
            displayName: Set OneBranch version
            inputs:
              system: Custom
              customVersion: $(package.version)
          - task: UseDotNet@2
            displayName: Use .NET SDK
            inputs:
              packageType: sdk
              useGlobalJson: true
          - pwsh: |
              Get-ChildItem | Write-Verbose -Verbose
              ./build.ps1 -Configuration Release
            displayName: Build
          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st-party files
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.TextUtility
              files_to_sign: |
                *.psd1;
                *.ps1xml;
                Microsoft.PowerShell.*.dll;
          - task: ArchiveFiles@2
            displayName: Zip module
            inputs:
              rootFolderOrFile: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.TextUtility
              includeRootFolder: false
              archiveType: zip
              archiveFile: out/Microsoft.PowerShell.TextUtility-v$(package.version).zip
          - pwsh: |
              ./build -package -nobuild
              Write-Verbose -Verbose ((Get-Item .).FullName)
              Write-Verbose -Verbose ((Get-Item $(Build.SourcesDirectory)).FullName)
              Get-ChildItem $(Build.SourcesDirectory) -Recurse -File -Name | Write-Verbose -Verbose
            displayName: Package module
          - task: onebranch.pipeline.signing@1
            displayName: Sign NuGet package
            inputs:
              command: sign
              signing_profile: external_distribution
              search_root: $(Build.SourcesDirectory)
              files_to_sign: "**/*.nupkg"
    - stage: release
      dependsOn: build
      condition: ${{ parameters.publishToPowerShellGallery }}
      variables:
        version: $[ stageDependencies.build.main.outputs['package.version'] ]
        drop: $(Pipeline.Workspace)/drop_build_main
      jobs:
      - job: validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release and then publish it!
            timeoutInMinutes: 1440
      - job: publish
        dependsOn: validation
        displayName: Publish to PowerShell Gallery
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.TextUtility
        steps:
        - download: current
          displayName: Download artifacts
        - task: NuGetCommand@2
          displayName: Publish ConsoleGuiTools to PowerShell Gallery
          inputs:
            command: push
            packagesToPush: $(Build.SourcesDirectory)/out/Microsoft.PowerShell.TextUtility.$(package.nupkgVersion).nupkg
            nuGetFeedType: external
            publishFeedCredentials: PowerShellGallery
